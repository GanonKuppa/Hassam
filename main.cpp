/***************************************************************/
/*                                                             */
/*      PROJECT NAME :  umouse forte                             */
/*      FILE         :  main.cpp                         */
/*      DESCRIPTION  :  Main Program                           */
/*      CPU SERIES   :  RX700                                  */
/*      CPU TYPE     :  RX71M                                  */
/*                                                             */
/*      This file is generated by e2 studio.                   */
/*                                                             */
/***************************************************************/

/************************************************************************/
/*    File Version: V1.00                                               */
/*    Date Generated: 08/07/2013                                        */
/************************************************************************/

#include "iodefine.h"

#ifdef CPPAPP
//Initialize global constructors
extern "C" void __main() {
    static int initialized;
    if (!initialized) {
        typedef void (*pfunc)();
        extern pfunc __ctors[];
        extern pfunc __ctors_end[];
        pfunc *p;

        initialized = 1;
        for (p = __ctors_end; p > __ctors;)
            (*--p)();
    }
}

#endif 

//その他
#include <stdint.h>
#include <string>
#include <array>
#include <myUtil.hpp>

//peripheral_RX71M
#include "clock.h"
#include <uart.h>
#include "gpio.h"
#include <timeInterrupt.h>
#include "spi.h"
#include "timer.h"
#include "ad.h"
#include "pwm.h"
#include "phaseCounting.h"
#include "dataFlash.h"
#include "da.h"

//robot_object
#include <imu.hpp>

#include "sound.h"
#include "tactsw.h"
#include "fcled.h"
#include "communication.h"
#include "parameterManager.h"
#include "gamepad.h"
#include "wallsensor.hpp"
#include "moveEvent.h"
#include "batVoltageMonitor.hpp"
#include "fanController.hpp"
#include "wheelOdometry.hpp"
#include "ICM20602.hpp"

//umouse_object
#include "maze.h"
#include <mouse.hpp>

//mode
#include "mode.h"

//namespaceの宣言
using namespace robot_object;
namespace peri = peripheral_RX71M;
using peri::getElapsedMsec;
using peri:: waitmsec;

//プロトタイプ宣言
void periperalInit();
void startUpInit();
void object_init();

//-------------タイマ割り込み関数---------------//
extern "C" void timeInterrupt(void);

//250usec毎に呼ばれる
void timeInterrupt(void) {
    //http://japan.renesasrulz.com/cafe_rene/f/69/t/1515.aspx 多重割り込み　資料
    __builtin_rx_setpsw('I');

    static uint64_t countIntNum = 0;

    //--------------------------------------//
    ICM20602& icm = ICM20602::getInstance();
    TactSw &tsw = TactSw::getInstance();
    FcLed &fcled = FcLed::getInstance();
    WallSensor &wallSen = WallSensor::getInstance();
    Gamepad &gamepad = Gamepad::getInstance();
    EventList &events = EventList::getInstance();
    UMouse &mouse = UMouse::getInstance();
    BatVoltageMonitor &batVolMan = BatVoltageMonitor::getInstance();
    WheelOdometry &wheelOdometry = WheelOdometry::getInstance();
    //--------------------------------------//

    //UARTの送受信処理
    peri::sendDataSCIFA9();
    peri::recieveDataSCIFA9();
    fetchCommand();
    //3000msec毎の処理
    if (countIntNum % 1200 == 0) {
        if(getElapsedMsec()>6000){
           batVolMan.lowVoltageCheck();
        }
    }


    //30msec毎の処理 120  20msec毎 80 10msec 40
    if (countIntNum % 120 == 0) {
        sendPeriodicMsg();
    }
    //スロット0
    if(countIntNum % 4 == 0){
        if(getElapsedMsec()>5000){
            icm.update();
        }
    }
    //スロット1
    if (countIntNum % 4 == 1){

        tsw.update();
        fcled.update();
        gamepad.update();
        wallSen.update();
    }
    //スロット2
    if (countIntNum % 4 == 2){
        wheelOdometry.update();

    }
    //スロット3
    if (countIntNum % 4 == 3){
        mouse.update();
        events.update();
    }

    /////毎回行う処理/////


    //リセットコマンドの監視
    if(gamepad.BACK >0 &&
       gamepad.LB >0 ){
       SYSTEM.PRCR.WORD = 0xA502; //ソフトウェアリセット
       SYSTEM.SWRR = 0xA501;
    }

    batVolMan.update();
    peri::sendDataSCIFA9();
    soundUpdate();
    peri::sendDataSCIFA9();
    peri::endTimeuCountIntCMT0();

    countIntNum++;
}

//-------------メイン関数---------------//
int main() {
    periperalInit();
    startUpInit();

    FcLed& fcled = FcLed::getInstance();
    UMouse  &mouse = UMouse::getInstance();


    //addBgmList(otenba);
    //addBgmList(meiji);
    //addBgmList(owen);
    //addBgmList(aaa);
    //addBgmList(saigetu);

    while(1){
        bgmClear();
        //addBgmList(nekuro);

        mouse.switch_back = false;
        modeSelect();

    };

    return 0;
}

//各ペリフェラルの初期化
void periperalInit() {
    //クロック
    peri::initClock();
    //IOピン
    peri::initGPIO();
    //UART
    peri::initSCI1();
    peri::initSCIFA9();

    //割り込み関数
    peri::initCMT0();
    peri::initCMT1();

    //SPI
    peri::initRSPI0();
    peri::initRSPI1();

    //時間測定
    peri::initTPU0();
    peri::initCMTW0();
    peri::initCMTW1();

    //AD
    peri::initAD();

    //位相係数
    peri::initMTU1();
    peri::initMTU2();

    //PWM
    peri::initMTU0();
    peri::initMTU3();
    peri::initMTU4();
    peri::initMTU7();

    //DA
    peri::initDA();
    printfAsync("-------各種ペリフェラル初期化完了-------\n");

    //データフラッシュ
    peri::initDataFlash();
    ParameterManager &pm = ParameterManager::getInstance();
    pm.init();

};

//起動時の処理
void startUpInit() {
    peri::setDutyMTU0(0.0);
    peri::setDutyMTU3(0.0);
    peri::setDutyMTU4(0.0);
    peri::setDutyMTU7(0.0);


    peri::setPriorityCMT0(12);
    peri::setPriorityCMT1(15);
    peri::startCMT0();
    printfAsync("-------CMT0割り込み開始-------\n");

    ICM20602& icm = ICM20602::getInstance();

    icm.init();

    //sound
    peri::startCMT1();
    printfAsync("-------CMT1割り込み開始-------\n");
    //
    object_init();
    /////////////コンパイル時固有文字列/////////
    printfAsync("Compile Date\n %s\n", __DATE__);
    uint16_t compile_hash = 0;
    for (int i = 0; i < sizeof(__TIME__); i++) {
        compile_hash += __TIME__[i];
    }

    printfAsync("Compile HASH: %d\n", compile_hash);
    printfAsync("Compile TIME: %s\n", __TIME__);
    printfAsync("Compile FILE: %s\n", __FILE__);
    printfAsync("---------------------------\n");
    GB();
    waitmsec(1800);
    randomNote(compile_hash);
    waitmsec(400);
    /////////////電池電圧警告////////////////
    BatVoltageMonitor::getInstance().voltageSoundCount();

    printfAsync("===finish init====\n");

};





void object_init(){
    //robot_object
    WallSensor::getInstance();
    TactSw::getInstance();
    ParameterManager::getInstance();
    Gamepad::getInstance();
    FcLed::getInstance();
    BatVoltageMonitor::getInstance();
    FanController::getInstance();
    WheelOdometry::getInstance();
    ICM20602::getInstance();
    UMouse::getInstance();

    //umouse_object



}

